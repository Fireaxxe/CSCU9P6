import java.util.Observable;
/* Generated by Together */

/**
 * This class holds key control information for the operation of the barrier
 * system.
 *
 * It extends Observable, and notifies its observers whenever either the date
 * changes (caused by the Timer class), or the barrier system activity status
 * changes (caused by an instance of the Campus security class), or the barrier
 * event log changes (caused by an instance of the Barrier class).
 *
 * There will only be one instance of this class.
 */
public class System_status extends Observable {
	/**
	 * This attribute is the central indication of the activity status of the
	 * whole barrier system. It is set/unset by messages from instances of the
	 * Campus security class.
	 */
	private boolean systemActive = false;

	/**
	 * An array of strings showing recent attempts to pass through the barriers
	 * (both successful and unsuccessful). The last 20 should be enough? These
	 * are intended for display on the Campus_security screens.
	 */
	private String[] log;

	/**
	 * This attribute is kept up to date by the Timer.
	 * 
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @link aggregation
	 * @label Contains
	 * @directed
	 */
	private Date today;

	/**
	 * Initialise an attempt log which records up to 20 attempted entries though
	 * the barrier (size of 20)
	 * 
	 * @author Nicholas Whitton
	 */
	public System_status() {
		log = new String[20];
	}

	/**
	 * This method will change the active state of the system. This will be used
	 * to make changes to the indication of the system state.
	 * 
	 * @param state
	 *            : boolean
	 * @author Robert Dunsmore
	 */
	public void changeSystemState(boolean state) {
		systemActive = state;
		setChanged();
		notifyObservers();
	}

	/**
	 * This method will add an entry to the attempt log.
	 * 
	 * @param logEntry
	 *            : The entry to be added to the log.
	 * @author Robert Dunsmore
	 */
	public void addToLog(String logEntry) {
		for (int i = log.length - 1; i > 0; i--) {
			log[i] = log[i - 1];
		}
		log[0] = logEntry;

		setChanged();
		notifyObservers();
	}

	/**
	 * Change the date that the system will use internally
	 * 
	 * @param newDay
	 *            : The new day.
	 * @author Robert Dunsmore
	 */
	public void changeDay(Date newDay) {
		today = newDay;
		setChanged();
		notifyObservers();
	}

	////////////////////////////////////////////////// GETTER
	////////////////////////////////////////////////// METHODS///////////////////////////////////////////////////////////

	/**
	 * This method will return the date held on the system
	 * 
	 * @return Date : the data held on the system.
	 * @author Robert Dunsmore
	 */
	public Date getDate() {
		return today;
	}

	/**
	 * This method will returns the log of successful and unsuccessful attempts
	 * to pass through the barrier. This method will be called from
	 * Campus_security
	 * 
	 * @return String : system log
	 * @author Robert Dunsmore
	 */
	public String[] getLog() {
		return log;
	}

	/**
	 * This method will return a boolean to determine if the system is currently
	 * active
	 * 
	 * @return boolean : systemActive
	 * @author Robert Dunsmore
	 */
	public boolean isSystemActive() {
		return systemActive;
	}

}
