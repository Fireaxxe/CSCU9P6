import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.*;

/* Generated by Together */

/**
 * The Campus security staff actually activate and deactivate the barriers,
 * enter warnings for vehicles breaching the parking regulations and monitor the
 * state of the barrier system. This class represents the interactive interface
 * to these functions. Information about these functions is in the Campus
 * security use case diagram (hyperlinked from this class). The interface
 * comprises one screen with the various functions present on it, all on view at
 * once since there aren't many. There could be several instances of this class:
 * one in the central security office, and one at each entrance to the
 * University (in a staffed booth). The class implements Observer, and observes
 * the system status so that it can keep the displayed information up to date
 * (current date, barriers active or not, log of entries through the barriers).
 * 
 * @stereotype boundary
 */
public class Campus_security extends JFrame implements Observer {
	/**
	 * Each instance of Campus_security has a navigable association to the
	 * vehicle list so that warnings can be recorded on the permit for vehicles
	 * that breach parking regulations. Note that this process goes via the
	 * vehicle list as the only information available about such a vehicle is
	 * its registration number.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Record warning
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Campus_security has a navigable association to the
	 * system status so that it can both find out status information about the
	 * system, and send controlling messages to the system status (to
	 * activate/deactivate the system).
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Control/monitor
	 * @directed
	 */
	private System_status lnkSystem_status;

	/*
	 * From here down are the components used for the UI.
	 */
	private Container contentPane;
	private JButton btnActivateDeactivate;
	private JTextField txtNumberPlate;
	private JButton btnRecordWarning;
	private JPanel pnlLog;
	private JLabel lblLog;
	private JLabel lblPlate;

	public Campus_security(System_status systemStatus, Vehicle_list vehicleList) {
		lnkVehicle_list = vehicleList;
		lnkSystem_status = systemStatus;
		lnkSystem_status.addObserver(this);

		/*
		 * Campus security window
		 */
		this.setBounds(0, 0, 506, 628);
		this.setResizable(false);
		this.setTitle("Campus Security");
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		contentPane = this.getContentPane();
		contentPane.setLayout(null);

		/*
		 * button to activate/deactivate system
		 */
		btnActivateDeactivate = new JButton("Activate");
		btnActivateDeactivate.setBounds(220, 20, 140, 50);
		btnActivateDeactivate.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (lnkSystem_status.isSystemActive()) {
					lnkSystem_status.changeSystemState(false);
				} else {
					lnkSystem_status.changeSystemState(true);
				}
			}
		});
		contentPane.add(btnActivateDeactivate);

		/*
		 * text field to input number plate
		 */
		txtNumberPlate = new JTextField();
		txtNumberPlate.setBounds(20, 110, 180, 30);
		contentPane.add(txtNumberPlate);

		/*
		 * button to record warning
		 */
		btnRecordWarning = new JButton("Record Warning");
		btnRecordWarning.setBounds(220, 100, 140, 50);
		btnRecordWarning.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String numberPlate = txtNumberPlate.getText();
				numberPlate = numberPlate.toUpperCase();
				Vehicle_info vehicle = lnkVehicle_list.getVehicle(numberPlate);
				if (vehicle == null) {
					JOptionPane.showMessageDialog(Campus_security.this,
							"There is no vehicle registered with that number plate.\n" + numberPlate, "No such vehicle",
							JOptionPane.WARNING_MESSAGE);
					return;
				}
				Permit permit = vehicle.getPermit();
				permit.addWarning(Campus_security.this);
				txtNumberPlate.setText("");
			}
		});
		contentPane.add(btnRecordWarning);

		lblLog = new JLabel("Log:");
		lblLog.setBounds(20, 180, 50, 16);
		contentPane.add(lblLog);

		pnlLog = new JPanel();
		pnlLog.setBounds(90, 180, 390, 400);
		pnlLog.setLayout(null);
		contentPane.add(pnlLog);

		lblPlate = new JLabel("Number Plate:");
		lblPlate.setBounds(20, 90, 180, 16);
		contentPane.add(lblPlate);

		this.setVisible(true);
	}

	@Override
	public void update(Observable o, Object arg) {
		if (((System_status) o).isSystemActive()) {
			btnActivateDeactivate.setText("Deactivate");
		} else {
			btnActivateDeactivate.setText("Activate");
		}
		String[] log = ((System_status) o).getLog();
		pnlLog.removeAll();
		JLabel lblLogEntry;
		for (int i = 0; i < log.length; i++) {
			if (log[i] == null) {
				break;
			}
			lblLogEntry = new JLabel(log[i]);
			lblLogEntry.setBounds(10, 20 * i, pnlLog.getWidth() - 20, 16);
			pnlLog.add(lblLogEntry);
			lblLogEntry.setVisible(true);
		}
		pnlLog.repaint();
	}
}
