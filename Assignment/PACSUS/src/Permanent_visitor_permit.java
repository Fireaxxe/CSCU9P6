/* Generated by Together */

/**
 * For a description of Permanent visitors, follow hyperlink to the
 * Administration use case for issuing a new Permanent visitor permit.
 */
public class Permanent_visitor_permit extends Permit {

	/**
	 * Constructor for end of year renewal
	 * 
	 * @author Nicholas Whitton
	 * @param p
	 *            The permit to be renewed
	 */
	public Permanent_visitor_permit(Permanent_visitor_permit p) {
		super(p);
	}

	/**
	 * Constructor for admin office use
	 * 
	 * @author Nicholas Whitton
	 * @param holder
	 *            The permit holder's name
	 */
	public Permanent_visitor_permit(String holder) {
		super(holder);
	}

	/**
<<<<<<< .mine
	 * In the case that the end date is before the start date, the permit will be
	 * renewed at the annual update, creating a new permit from day 1 to the finish
	 * date
||||||| .r90
	 * In the case that the end date is before the start date, 
	 * the permit will be renewed at the annual update, 
	 * creating a new permit from day 1 to the finish date
=======
	 * In the case that the end date is before the start date, the permit will
	 * be renewed at the annual update, creating a new permit from day 1 to the
	 * finish date
>>>>>>> .r98
	 */
	@Override
	public boolean isValid(Date date) {
		return true;
	}

	/**
	 * Converting all the permit info into a string used for displaying
	 */
	public String toString() {
		return "Permit Holder: " + this.getHolder() + " \n" + "Warnings: " + this.getWarnings() + " \nVehicles: "
				+ getVehicles() + " \nDays entered: " + getNoOfEntries();
	}

	@Override
	public void setDate(Date date) {
		// Method has no effect on objects of this class
	}
}