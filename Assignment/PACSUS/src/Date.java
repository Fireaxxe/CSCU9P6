/* Generated by Together */

/**
 * For simplicity, dates are represented as simple integers, counting from 1 up
 * to 365 (we will ignore Leap years in PACSUS) from the 1st September each year
 * - so the PACSUS "year" runs from 1st September to 31st August. When the date
 * is incremented it "wraps" automatically from 365 to 1.
 *
 * !!!!!**** During testing it might be convenient to set the year "length" at,
 * say, 10 days. !!!!!****
 *
 * No permits are issued to span from one year into the next; instead re-issue
 * occurs "automatically" at the start of the year (see the Timer use case
 * diagram - follow hyperlink) - all permits are simply carried over to the new
 * year (except Day visitor and Regular visitor permits that expire on the last
 * day of the year). Permits which have a limited period of validity (Day
 * visitor and Regular visitor permits) are automatically cancelled from PACSUS
 * at the start of the day following their last valid day.
 *
 * Useful services offered by this class would probably be for checking if it's
 * the first day of a new academic year, and comparing dates within the year for
 * equal, before and after.
 */
public class Date {
	public Date() {
		dayNumber = 1;
	}

	public Date(int dayNo) {
		dayNumber = (dayNo - 1) % yearLength + 1;
		if (dayNumber < 1) {
			dayNumber += yearLength;
		}
	}

	/**
	 * This operation adds one to the day number, wrapping round to 1 once the
	 * dayNumber is equal to the set year length
	 * 
	 * @author Freya
	 */
	public void increment() {
		if (dayNumber == yearLength) {
			dayNumber = 1;
		} else {
			dayNumber++;
		}
	}

	/**
	 * Sets the current date stored in this object
	 * 
	 * @param date
	 *            the date to be stored
	 */
	public void setDate(int date) {
		dayNumber = date;
	}

	/**
	 * For simplicity, dates will be represented just by an integer in the range
	 * 1-365. No Leap years!
	 */
	private int dayNumber = 1;

	/**
	 * attribute for length of a year for the system can be changed to 10 for
	 * testing
	 */
	public static final int yearLength = 365;

	@Override
	public boolean equals(Object o) {
		if (!(o instanceof Date)) {
			return false;
		}
		return ((Date) o).dayNumber == dayNumber;
	}

	/**
	 * Checks if the date is between two dates, inclusive
	 * 
	 * @param start
	 *            the first day of the range
	 * @param finish
	 *            the last day of the range
	 * @return whether the date is between the start and finish
	 * @author Nicholas Whitton
	 */
	public boolean isBetween(Date start, Date finish) {
		return (dayNumber >= start.dayNumber && dayNumber <= finish.dayNumber);
	}

	/**
	 * Checks if this date is before the given date
	 * 
	 * @param date
	 *            the date to be compared against
	 * @return whether this date is before the given date
	 * @author Nicholas Whitton
	 */
	public boolean isBefore(Date date) {
		return dayNumber < date.dayNumber;
	}

	/**
	 * Gets the current dayNumber
	 * 
	 * @return the current day number
	 * @author Freya
	 */
	public int getDay() {
		return dayNumber;
	}

	/**
	 * Convert the date into an integer used for displaying (day number within
	 * the permit calendar year.)
	 */
	public String toString() {
		return Integer.toString(dayNumber);
	}
}
