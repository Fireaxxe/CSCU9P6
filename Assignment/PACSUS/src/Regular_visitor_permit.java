/* Generated by Together */

/**
 * For a description of Regular visitors, follow hyperlink to the Administration
 * use case for issuing a new Regular visitor permit.
 */
public class Regular_visitor_permit extends Permit {

	/**
	 * The name of the University member hosting the visit.
	 */
	private String hostName;

	/**
	 * The date that the visitor permit starts - entry will not be allowed
	 * before this date.
	 * 
	 * @label Starting on
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @link aggregation
	 * @directed
	 */
	private Date issuedOn;

	/**
	 * The date that the visitor permit ends - entry will not be allowed after
	 * this date.
	 * 
	 * @label Ending on
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @link aggregation
	 * @directed
	 */
	private Date expiresOn;

	/**
	 * Constructor for end of year renewal of permits which run into the next
	 * year
	 * 
	 * @param p
	 *            The permit to be renewed
	 */
	public Regular_visitor_permit(Regular_visitor_permit p) {
		super(p);
		hostName = p.hostName;
		issuedOn = new Date();
		issuedOn.setDate(1);
		expiresOn = p.expiresOn;
	}

	/**
	 * Constructor for admin office use
	 * 
	 * @author Nicholas Whitton
	 * @param holder
	 *            The permit holder's name
	 * @param host
	 *            The name of the visitor's host
	 * @param startDate
	 *            The date on which this permit will become valid
	 * @param endDate
	 *            The last date on which this permit will be valid
	 */
	public Regular_visitor_permit(String holder, String host, Date startDate, Date endDate) {
		super(holder);
		hostName = host;
		this.issuedOn = startDate;
		this.expiresOn = endDate;
	}

	/**
	 * In the case that the end date is before the start date, the permit will
	 * be renewed at the annual update, creating a new permit from day 1 to the
	 * finish date
	 */
	@Override
	public boolean isValid(Date todaysDate) {
		return todaysDate.isBetween(issuedOn, expiresOn)
				|| (!todaysDate.isBefore(issuedOn) && expiresOn.isBefore(issuedOn));
	}

	/**
	 * Gets the last day that this permit is valid
	 * 
	 * @return the last day that this permit is valid
	 */
	public Date getLastDay() {
		return expiresOn;
	}

	/**
	 * Gets the day the permit was issued on
	 * 
	 * @return the day the permit was issued on
	 */
	public Date getStartDay() {
		return issuedOn;
	}

	/**
	 * Getting the name of the host assigned to that permit
	 * 
	 * @return The name of the host
	 */
	public String getHost() {
		return hostName;
	}

	/**
	 * Converting all the permit info into a string used for displaying
	 */
	public String toString() {
		return "Permit Holder: " + this.getHolder() + " \n" + "Permit host: " + this.getHost() + " \n" + "Starts on: "
				+ this.getStartDay() + " \n" + "Expires on: " + this.getLastDay() + " \n" + "Warnings: "
				+ this.getWarnings() + " \nVehicles: " + getVehicles() + " \nDays entered: " + getNoOfEntries();
	}

	@Override
	public void setDate(Date date) {
		expiresOn = date;
	}
}
