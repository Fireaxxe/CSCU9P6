import java.util.Collection;
import java.util.Hashtable;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/* Generated by Together */

/**
 * Abstract superclass of all permit types. Note that since this class is
 * abstract, all "instances" of it are actually instances of its concrete
 * subclasses. The vehicles permitted entry by this permit are recorded here in
 * the permittedVehicles attribute. Further information could be recorded here,
 * such as contact details for the permit holder (and for the hosts in Regular
 * and Day visitor subclasses), but in this design these details are not
 * required. Note that no permit holder may have more than one permit at any
 * time, so no two instances of Permit (through its concrete sub-classes) may
 * have the same permit holder name. There is no direct notation for this.
 * Instead the Permit list object collecting the Permit must enforce it by
 * checking new additions (a hash table will help with this).
 *
 * For subclasses with dates: No permits are issued to span from one year into
 * the next; instead re-issue occurs "automatically" at the start of the year
 * (see the Timer use case diagram - follow hyperlink) - all permits are simply
 * carried over to the new year (except Day visitor and Regular visitor permits
 * that expire on the last day of the year). Permits which have a limited period
 * of validity (Day visitor and Regular visitor permits) are automatically
 * cancelled from PACSUS at the start of the day following their last valid day.
 */
abstract public class Permit {
	/**
	 * The name of the permit holder
	 */
	private String permitHolder;

	/**
	 * Counts the number of days on which the campus was entered while the
	 * access barriers were in operation. Counting starts when the permit is
	 * issued, and afresh at the start of each year.
	 */
	private int noOfEntries = 0;

	/**
	 * Counts the number of warnings issued to vehicles registered on this
	 * permit.
	 */
	private int warnings = 0;

	/**
	 * False if the permit has not been suspended, and true if it has (on the
	 * third warning).
	 */
	private boolean suspended = false;

	/**
	 * Set to false at the start of each day. Remains false until first entry of
	 * a vehicle on this permit, when it is set true, and the vehicle is noted
	 * in vehicleUsed. Used for checking that subsequent entries in the day are
	 * the same vehicle (since exits are not monitored).
	 */
	private boolean enteredToday = false;

	/**
	 * Once a vehicle has entered on this permit on any day, this attribute
	 * records the vehicle that entered, so that any subsequent entries
	 * associated with this permit can be verified as the same vehicle (or at
	 * least with the same registration number!). The attribute will be null
	 * until a vehicle has entered.
	 * 
	 * @clientCardinality 1
	 * @directed true
	 * @label Allowed today
	 * @supplierCardinality 0..1
	 */
	private Vehicle_info vehicleUsedToday;

	/**
	 * This holds references to all the Vehicle_info instances for the vehicles
	 * registered to this permit. Note that any vehicle can be registered to
	 * only one permit, but many vehicles may be registered to the same permit.
	 * This attribute must be implemented by a collection data structure (such
	 * as array, hash table,...).
	 * 
	 * @clientCardinality 1
	 * @directed true
	 * @label Controls access of
	 * @supplierCardinality 0..*
	 */
	private Hashtable<String, Vehicle_info> permittedVehicles = new Hashtable<String, Vehicle_info>();

	/**
	 * For testing purposes
	 * 
	 * @param holder
	 *            The permit holder's name
	 * @author Nicholas Whitton
	 */
	public Permit(String holder) {
		permitHolder = holder;
	}

	public Permit(Permit p) {
		permitHolder = p.permitHolder;
		warnings = p.warnings;
		suspended = p.suspended;
		permittedVehicles.putAll(p.permittedVehicles);
	}

	/**
	 * Adds a warning to this permit and displays how many warnings the permit
	 * holder has
	 * 
	 * @param sourceWindow
	 *            The window which should act as a parent when displaying the
	 *            message.
	 * @author Nicholas Whitton
	 */
	public void addWarning(JFrame sourceWindow) {
		warnings++;
		if (warnings >= 3) {
			suspended = true;
		}

		String message = "Warning issued to " + permitHolder + "\n" + permitHolder + " now has " + warnings
				+ " warnings";
		if (suspended) {
			message = message.concat("\n" + permitHolder + "'s permit has been suspended.");
		}
		JOptionPane.showMessageDialog(sourceWindow, message, "Warned Permit Holder", JOptionPane.INFORMATION_MESSAGE);
	}

	/**
	 * Removed a warning to this permit and display how many warnings the permit
	 * holder has.
	 * 
	 * @param sourceWindow
	 *            The window which should act as a parent when displaying the
	 *            message.
	 * @author Robert Dunsmore
	 */
	public void removeWarning(JFrame sourceWindow) {

		String message;
		if (warnings <= 0) {
			message = "No warnings to remove from " + permitHolder;
		} else {
			warnings--;
			message = "Warning issued removed from " + permitHolder + "\n" + permitHolder + " now has " + warnings
					+ " warnings";
			if (warnings == 2) {
				suspended = false;
				message = message.concat("\n" + permitHolder + "'s permit no longer suspened");
			}
		}
		JOptionPane.showMessageDialog(sourceWindow, message, "Warned Permit Holder", JOptionPane.INFORMATION_MESSAGE);

	}

	/**
	 * Adds a vehicle to the permit if it does not already have an associated
	 * permit
	 * 
	 * @param vehicle_info
	 * @author Nicholas Whitton
	 */
	public void addVehicle(Vehicle_info vehicle_info) {
		if (!permittedVehicles.contains(vehicle_info)) {
			permittedVehicles.put(vehicle_info.toString(), vehicle_info);
		}
	}

	/**
	 * Checks if the permit is valid on the given date
	 * 
	 * @param date
	 *            the date to be checked
	 * @return whether the permit is valid
	 * @author Nicholas Whitton
	 */
	public abstract boolean isValid(Date date);

	/**
	 * Checks if the permit is suspended
	 * 
	 * @return true if the permit is suspended
	 * @author Nicholas Whitton
	 */
	public boolean isSuspended() {
		return suspended;
	}

	/**
	 * Checks if the permit holder has entered today
	 * 
	 * @return true if the permit holder has entered
	 * @author Nicholas Whitton
	 */
	public boolean hasEntered() {
		return enteredToday;
	}

	/**
	 * Gets the vehicle that the permit holder is entered with today as 1 permit
	 * may have more than 1 vehicle attached to it
	 * 
	 * @return the vehicle that the permit holder is entered with today
	 * @author Nicholas Whitton
	 */
	public Vehicle_info getVehicleToday() {
		return vehicleUsedToday;
	}

	/**
	 * Gets the holder's name
	 * 
	 * @return the holder's name
	 * @author Nicholas Whitton
	 */
	public String getHolder() {
		return permitHolder;
	}

	/**
	 * Gets the warnings for the permit.
	 * 
	 * @return All of the warnings on the permit
	 */
	public int getWarnings() {
		return warnings;
	}

	/**
<<<<<<< .mine
	 * Gets all of the vehicles likes to that permit.
	 * 
	 * @return All of the vehicles
||||||| .r86
	 * Gets all of the vehicles likes to that permit.
	 * @return  All of the vehicles 
=======
	 * Gets all of the vehicles links to that permit.
	 * 
	 * @return All of the vehicles
>>>>>>> .r98
	 */
	public Collection<Vehicle_info> getVehicles() {
		return permittedVehicles.values();
	}

	/**
	 * Removes a vehicle from the list of vehicles on that permit.
	 * 
	 * @param veh
	 *            The vehicle to remove
	 */
	public void removeVehicle(Vehicle_info veh) {
		permittedVehicles.remove(veh.toString());
	}

	/**
	 * Recording the vehicle of that permit that has entered today.
	 * 
	 * @param numberPlate
	 *            The number plate of the vehicle that has entered
	 */
	public void enter(String numberPlate) {
		if (!enteredToday) {
			noOfEntries++;
		}
		enteredToday = true;
		vehicleUsedToday = permittedVehicles.get(numberPlate);
	}

	/**
	 * Clearing the vehicle that has entered at the end of the day (resets
	 * permit use info after end of day)
	 */
	public void notifyEndOfDay() {
		enteredToday = false;
		vehicleUsedToday = null;
	}

	/**
	 * Gets the number of days this permit has been used for entry
	 * 
	 * @return The number of days this permit has been used for entry
	 */
	public int getNoOfEntries() {
		return noOfEntries;
	}

	/**
	 * For day and regular visitor permits, allows changing of valid and end dates
	 * respectively, has no effect on other permits
	 * 
	 * @param date the new date to be valid/end on
	 */
	public abstract void setDate(Date date);

}
