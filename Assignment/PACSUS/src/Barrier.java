import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/* Generated by Together */

/**
 * This class represents the access control barriers. Information about the
 * barrier functions is in the Barrier use case diagram (hyperlinked from this
 * class). Although in reality this class will be realised by (programmable)
 * hardware with a moveable barrier, and a camera with a registration number
 * recognition system, here the interface comprises one screen with the various
 * functions present on it, all on view at once since there aren't many.
 *
 * There will be a large word PASS or STOP on display at all times: PASS when
 * the barrier is up because the system is inactive or temporarily when a
 * permitted vehicle is being allowed through, and STOP when the barrier is
 * down.
 *
 * There will be a text field to enter the registration number read by the
 * camera, and a button to indicate that the number has been read and is ready
 * for checking (and raising the barrier or not, as appropriate).
 *
 * To simulate the passage of a vehicle through the raised barrier, there is
 * another button to be clicked to simulate when a buried electronic sensor
 * indicates that the vehicle is now clear - the barrier can then be lowered
 * (unless, of course, the system has been deactivated by security staff in the
 * interim...).
 *
 * There could be many instances of this class: one at each entrance lane to the
 * University. The class implements Observer, and observes the system status so
 * that it can keep its activated/deactivated status up to date.
 * 
 * @stereotype boundary
 */

public class Barrier extends JFrame implements Observer {

	/**
	 * Each instance of Barrier has a navigable association to the permit list
	 * so that when a vehicle's registration number has been recognized by the
	 * camera, the barrier can check whether to raise itself or not by checking
	 * the status of that vehicle's permit.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Access permits
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Barrier has a navigable association to the system status
	 * so that it can check whether the barrier system as a whole is active or
	 * inactive, and so that it can send event messages to be recorded in the
	 * log.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Fetch system status info
	 * @directed
	 */
	private System_status lnkSystem_status;

	/**
	 * If the barrier system is active, this attribute indicates whether the
	 * barrier is currently in its raised or lowered position. The position is
	 * controlled by the result of checking a registration number with the
	 * permitted vehicles list, and the "vehicle clear" button.
	 */
	// private boolean raised;

	/**
	 * This attribute indicates the active/inactive state of the barrier system
	 * - as notified by the system status when it changes (Barrier Observes
	 * System status). If false then the barrier must be up. If true then the
	 * barrier position is determined by attribute raised.
	 */
	private boolean active;

	private Container contentPane;
	private JButton btnClear;
	private JButton btnAccessPermits;
	private JTextField read;
	private JTextField pass_stop;
	private String stop;
	private String pass;

	public Barrier(System_status systemStatus, Vehicle_list vehicleList) {
		// TODO Auto-generated constructor stub

		lnkSystem_status = systemStatus;
		lnkVehicle_list = vehicleList;
		lnkSystem_status.addObserver(this);

		/*
		 * barrier UI
		 */
		this.setBounds(500, 0, 406, 228);
		this.setResizable(false);
		this.setTitle("Barrier");
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		contentPane = this.getContentPane();
		contentPane.setLayout(null);

		/*
		 * Clear button
		 */
		btnClear = new JButton("Clear");
		btnClear.setBounds(220, 25, 140, 50);

		btnClear.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {

				if (((System_status) systemStatus).isSystemActive()) {
					raised(false);
				}
			}
		});

		contentPane.add(btnClear);

		Font font1 = new Font("SansSerif", Font.BOLD, 40);
		stop = "STOP";
		pass = "PASS";

		read = new JTextField();
		read.setBounds(20, 135, 180, 30);
		contentPane.add(read);

		pass_stop = new JTextField(stop);
		pass_stop.setBounds(20, 15, 180, 80);
		pass_stop.setFont(font1);
		pass_stop.setHorizontalAlignment(JTextField.CENTER);
		pass_stop.setEditable(false);
		contentPane.add(pass_stop);

		/*
		 * activate camera OCR
		 */
		btnAccessPermits = new JButton("Camera Read");
		btnAccessPermits.setBounds(220, 125, 140, 50);

		btnAccessPermits.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String numberPlate = read.getText();
				numberPlate = numberPlate.toUpperCase();
				Vehicle_info vehicle = lnkVehicle_list.getVehicle(numberPlate);

				if (vehicle == null) {
					denyEntry(numberPlate, "There is no vehicle registered with that number plate.\n" + numberPlate,
							"No such vehicle",
							"Failed attempt. No registered vehicle with Number Plates: " + numberPlate);
					return;
				}

				else {
					Permit permit = vehicle.getPermit();
					if (permit == null || !permit.isValid(lnkSystem_status.getDate())) {
						denyEntry(numberPlate, "There is no valid permit attached to that vehicle.\n" + numberPlate,
								"No valid permit", "Failed attempt. No valid permit for vehicle: " + numberPlate);
						return;
					} else if (permit.isSuspended()) {
						denyEntry(numberPlate, "The permit attached to that vehicle is suspended.\n" + numberPlate,
								"Suspended permit", "Failed attempt. Permit suspended for vehicle: " + numberPlate);
						return;
					} else if (permit.hasEntered() && !permit.getVehicleToday().equals(vehicle)) {
						denyEntry(numberPlate,
								"The permit holder has already entered with a different vehicle.\n" + numberPlate,
								"Different vehicle",
								"Failed attempt. Permit holder already entered in other vehicle: " + numberPlate);
						return;
					}

					JOptionPane.showMessageDialog(Barrier.this, "Wait...\nReading the number plate:\n" + numberPlate,
							"Checking...", JOptionPane.WARNING_MESSAGE);

					read.setText("");

					systemStatus.addToLog("Succesful attempt. Number Plate: " + numberPlate);
					permit.enter(numberPlate);
					raised(true);

				}
			}
		});

		contentPane.add(btnAccessPermits);

		active(false);
		btnAccessPermits.setEnabled(false);

		this.setVisible(true);
	}

	private void active(boolean active) {
		if (active == false) {
			raised(true);
		} else if (active == true) {
			raised(false);
		}

	}

	private void raised(boolean raised) {
		if (raised == true) {
			pass_stop.setText(pass);
		} else if (raised == false) {
			pass_stop.setText(stop);
		}
	}

	@Override
	public void update(Observable o, Object arg) {
		if (!((System_status) o).isSystemActive()) {
			active(false);
			btnAccessPermits.setEnabled(false);
		} else {
			active(true);
			btnAccessPermits.setEnabled(true);
		}
	}

	/**
	 * 
	 * 
	 * @param message
	 * @param title
	 * @param logEntry
	 */
	private void denyEntry(String numberPlate, String message, String title, String logEntry) {
		JOptionPane.showMessageDialog(Barrier.this, "Wait...\nReading the number plate:\n" + numberPlate, "Checking...",
				JOptionPane.WARNING_MESSAGE);

		JOptionPane.showMessageDialog(Barrier.this, message, title, JOptionPane.WARNING_MESSAGE);

		read.setText("");

		lnkSystem_status.addToLog(logEntry);
	}
}
