import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

/* Generated by Together */

/**
 * Vehicle list manages the collection of vehicles currently associated with
 * permits. It handles checks of whether vehicles are allowed through the
 * barriers, records warnings, and various other functions. Note that each
 * Vehicle_info object must have a unique registration number, to allow sensible
 * checking and recording of entries onto the campus (so a HashTable is probably
 * a good implementation of the collection, with registration number as key).
 *
 * There will only be one instance of this class.
 */
public class Vehicle_list {
	/**
	 * The Vehicle list maintains a collection of the known Vehicle_infos
	 * associated with all permits. This association must be implemented by an
	 * attribute holding a collection data structure (for example: array, hash
	 * table - the latter is recommended).
	 *
	 * Note that no two Vehicle_infos may have the same registration number
	 * (this information is not represented diagrammatically) - this is to
	 * guarantee consistency with the constraint that no vehicle is associated
	 * with more than one permit.
	 *
	 * Note that, given a registration number, the Vehicle_list can look up the
	 * appropriate Vehicle_info instance, and via that it can obtain the
	 * vehicle's permit information.
	 * 
	 * @associates Vehicle_info
	 * @label Contains
	 * @clientCardinality 1
	 * @supplierCardinality 0..*
	 * @directed
	 */
	private Hashtable<String, Vehicle_info> lnkVehicle;

	/**
	 * Constructor of the vehicle list, creating a hash table with a number
	 * plate as a key and vehicle info as the value
	 */
	public Vehicle_list() {
		lnkVehicle = new Hashtable<String, Vehicle_info>();
	}

	/**
	 * Retrieves a Vehicle_info instance from the list by looking up the given
	 * number plate
	 * 
	 * @author Nicholas Whitton
	 * @param numberPlate
	 * @return the Vehicle_info instance with the given number plate, or null if
	 *         there is no registered vehicle with that number plate
	 */
	public Vehicle_info getVehicle(String numberPlate) {
		return lnkVehicle.get(numberPlate);
	}

	/**
	 * Adds a new vehicle to the Vehicle_list
	 * 
	 * @param vehicle_info
	 *            the details of the vehicle to be added
	 */
	public void add(Vehicle_info vehicle_info) {
		lnkVehicle.put(vehicle_info.toString(), vehicle_info);
	}

	/**
	 * method to update a previously registered vehicle's number plate with in
	 * the system.
	 * 
	 * @param currentReg
	 *            The number plate of the car to change
	 * @param newReg
	 *            The new vehicle to replace the current vehicle
	 * @author Robert Dunsmore
	 */
	public void changeRegNumber(String currentReg, Vehicle_info newReg) {
		lnkVehicle.remove(currentReg);
		this.add(newReg);
	}

	/**
	 * Removes a single vehicle from the list via a regNo search
	 * 
	 * @param regNo
	 *            The number plate of the vehicle to remove
	 */
	public void removeVehicle(String regNo) {
		lnkVehicle.remove(regNo);
	}

	/**
	 * Gets all of the vehicles in the hash table
	 * 
	 * @return ArrayList of all of the vehicles
	 */
	public ArrayList<Vehicle_info> getAll() {
		ArrayList<Vehicle_info> vehicles = new ArrayList<Vehicle_info>();
		Enumeration<String> keys = lnkVehicle.keys();
		while (keys.hasMoreElements()) {
			vehicles.add(lnkVehicle.get(keys.nextElement()));
		}
		return vehicles;
	}
}
