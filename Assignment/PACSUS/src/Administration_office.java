import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.util.*;

/* Generated by Together */

/**
 * This class represents the interactive interface to PACSUS administration
 * functions carried out in the Estates and Campus Services Office. Information
 * about these functions is in the Administration use case diagram (hyperlinked
 * from this class).
 *
 * The interface comprises one screen with all the functions present on it: they
 * could all be on view at once, or perhaps in alternative JPanels (in a JFrame
 * with JTabbedPane); the current date (day number) is always displayed.
 *
 * There could be any number of instances of this class, potentially one for
 * each workstation in the office, with different staff carrying different
 * functions.
 *
 * The class implements Observer, and observes the system status so that it can
 * keep the displayed current date correct.
 * 
 * @stereotype boundary
 */
public class Administration_office extends JFrame implements Observer {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * permit list so that it can enquire about/add/delete/modify permits.
	 * 
	 * @supplierCardinality 1
	 * @clientCardinality 1..*
	 * @label Administration functions
	 * @directed
	 */
	private Permit_list lnkPermit_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * vehicle list so that it can enquire about/add/delete/modify vehicle details.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label Administration functions
	 * @directed
	 */
	private Vehicle_list lnkVehicle_list;

	/**
	 * Each instance of Administration_office has a navigable association to the
	 * system status so that it can find out status information about the system.
	 * 
	 * @clientCardinality 1..*
	 * @supplierCardinality 1
	 * @label See date
	 * @directed
	 */
	private System_status lnkSystem_status;

	JTextField textDate;
	DefaultListModel<Permit> modellist;
	JList<Permit> list;

	ArrayList<String> alist = new ArrayList<String>();

	public Administration_office(System_status systemStatus, Vehicle_list vehicleList, Permit_list permitList) {

		// pointing the admin lists to main class
		lnkVehicle_list = vehicleList;
		lnkPermit_list = permitList;
		lnkSystem_status = systemStatus;

		lnkSystem_status.addObserver(this);
		JTextField textRegNum;

		JTextField textName;
		JTextField textHostName;
		/*
		 * admin window constructor
		 */

		this.setBounds(900, 0, 430, 628);
		this.setResizable(false);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.getContentPane().setLayout(null);
		this.setTitle("Admin Office");

		/*
		 * text field to enter car registration
		 */
		textRegNum = new JTextField();
		textRegNum.setBounds(113, 186, 119, 20);
		this.getContentPane().add(textRegNum);
		textRegNum.setColumns(10);

		/*
		 * text field to enter name of permit holder
		 */
		textName = new JTextField();
		textName.setBounds(113, 136, 119, 20);
		this.getContentPane().add(textName);
		textName.setColumns(10);

		modellist = new DefaultListModel<Permit>();

		/*
		 * text field displaying todays date
		 */
		textDate = new JTextField();
		textDate.setBounds(60, 13, 96, 20);
		this.getContentPane().add(textDate);
		textDate.setColumns(10);
		textDate.setEditable(false);

		/*
		 * text field to host name of permit holder
		 */
		textHostName = new JTextField();
		textHostName.setBounds(113, 161, 119, 20);
		this.getContentPane().add(textHostName);
		textHostName.setColumns(10);

		JLabel lblRegistrarionNumber = new JLabel("Number plate:");
		lblRegistrarionNumber.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblRegistrarionNumber.setBounds(20, 187, 101, 14);
		this.getContentPane().add(lblRegistrarionNumber);

		JLabel lblActivePermits = new JLabel("Active Permits");
		lblActivePermits.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblActivePermits.setBounds(20, 271, 117, 28);
		this.getContentPane().add(lblActivePermits);

		/*
		 * button to record warning
		 */
		JButton btnRecordWarning = new JButton("Record warning");
		btnRecordWarning.setBounds(242, 313, 139, 46);
		btnRecordWarning.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// Search type
				String[] options = { "Name", "Number Plate" };
				int optionChosen = JOptionPane.showOptionDialog(Administration_office.this,
						"Do you know the name or the number plate to add the warning to?", "Name or Number Plate",
						JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, "Name");
				// Search switch
				switch (optionChosen) {
				// Search based on name
				case 0:
					// Get the permit holders name
					String name = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the name of the holder ", "Permit Holder Input", JOptionPane.PLAIN_MESSAGE);
					// Validate the input
					if (name == null) {
						break;
					}
					try {
						// Validate the permit
						if (lnkPermit_list.get(name).isValid(lnkSystem_status.getDate())) {
							// Add warning to the permit
							lnkPermit_list.get(name).addWarning(Administration_office.this);
						}
					} catch (NullPointerException e1) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that name.\n" + name, "No such permit",
								JOptionPane.WARNING_MESSAGE);
					}
					break;
				// Reg No input and search
				case 1:
					// Getting the number plate
					String numberPlate = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the Registration Number", "Registration Number Input",
							JOptionPane.PLAIN_MESSAGE);
					// Validate the input
					if (numberPlate == null) {
						break;
					}
					// Get the vehicle based on the name
					numberPlate = numberPlate.toUpperCase();
					Vehicle_info vehicle = lnkVehicle_list.getVehicle(numberPlate);
					// Validate the vehicel
					if (vehicle == null) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no vehicle registered with that number plate.\n" + numberPlate,
								"No such vehicle", JOptionPane.WARNING_MESSAGE);
						break;
					}

					try {
						// Get the permit based on the vehicle
						Permit permit = vehicle.getPermit();
						// Validate the permit
						if (permit.isValid(lnkSystem_status.getDate()))
							// Add warning to the permit
							permit.addWarning(Administration_office.this);
					} catch (NullPointerException e1) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that vehicle.\n" + numberPlate, "No such permit",
								JOptionPane.WARNING_MESSAGE);
					}
					break;
				}
			}
		});
		this.getContentPane().add(btnRecordWarning);

		/*
		 * button to delete a warning
		 */
		JButton btnDeleteWarning = new JButton("Delete warning ");
		btnDeleteWarning.setBounds(242, 370, 139, 46);
		btnDeleteWarning.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// Getting the type of search
				String[] options = { "Name", "Number Plate" };
				int optionChosen = JOptionPane.showOptionDialog(Administration_office.this,
						"Do you know the name or the number plate to remove the warning from?", "Name or Number Plate",
						JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, "Name");
				// Search switch
				switch (optionChosen) {
				// Search based on the name
				case 0:
					// Getting the permit holders name
					String name = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the name of the holder ", "Permit Holder Input", JOptionPane.PLAIN_MESSAGE);
					// Validate the input
					if (name == null) {
						break;
					}
					try {
						// Remove a warning from the permit
						if (lnkPermit_list.get(name).isValid(lnkSystem_status.getDate())) {
							lnkPermit_list.get(name).removeWarning(Administration_office.this);
						}
					} catch (NullPointerException e1) {
						// Inform the user not permit was found
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that name.\n" + name, "No such permit",
								JOptionPane.WARNING_MESSAGE);
					}
					break;
				// Search based on number plate
				case 1:
					// Reg No input and search
					String numberPlate = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the Registration Number", "Registration Number Input",
							JOptionPane.PLAIN_MESSAGE);
					// Validate the input
					if (numberPlate == null) {
						break;
					}
					// Getting the vehicle based on the input
					numberPlate = numberPlate.toUpperCase();
					Vehicle_info vehicle = lnkVehicle_list.getVehicle(numberPlate);
					// Validate the vehicle
					if (vehicle == null) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no vehicle registered with that number plate.\n" + numberPlate,
								"No such vehicle", JOptionPane.WARNING_MESSAGE);
						break;
					}

					try {
						// Get the permit based on the number plate
						Permit permit = vehicle.getPermit();
						// Validate the permit
						if (permit.isValid(lnkSystem_status.getDate()))
							// Remove a warning from the permit
							permit.removeWarning(Administration_office.this);
					} catch (NullPointerException e1) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that vehicle.\n" + numberPlate, "No such permit",
								JOptionPane.WARNING_MESSAGE);
					}
					break;
				}
			}
		});
		this.getContentPane().add(btnDeleteWarning);

		/*
		 * button to cancel a permit
		 */
		JButton btnCancelPermit = new JButton("Cancel Permit");
		btnCancelPermit.setBounds(242, 427, 139, 46);
		btnCancelPermit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Getting the type of search
				String[] options = { "Name", "Number Plate" };
				int optionChosen = JOptionPane.showOptionDialog(Administration_office.this,
						"Do you know the name or the number plate to cancel the permit for?", "Name or Number Plate",
						JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, "Name");
				// Search switch
				switch (optionChosen) {
				// Search based on the name
				case 0:
					// Getting the permit holders name
					String name = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the name of the holder ", "Permit Holder Input", JOptionPane.PLAIN_MESSAGE);
					// Validate the input
					if (name == null) {
						break;
					}
					try {
						// Validate the permit
						if (lnkPermit_list.get(name).isValid(lnkSystem_status.getDate())) {
							// Loop through all of the vehicles on that permit
							for (Vehicle_info v : lnkPermit_list.get(name).getVehicles()) { // Remove the vehicle from
																							// the vehicle list
								lnkVehicle_list.removeVehicle(v.toString());
							}
							// Remove the permit from the permit list
							lnkPermit_list.removePermit(lnkPermit_list.get(name), Administration_office.this);
							modellist.removeElement(lnkPermit_list.get(name));
						}
					} catch (NullPointerException e1) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that name.\n" + name, "No such permit",
								JOptionPane.WARNING_MESSAGE);
					}
					break;
				case 1:
					// Reg No input and search
					String numberPlate = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the Registration Number", "Registration Number Input",
							JOptionPane.PLAIN_MESSAGE);
					// Validate the input
					if (numberPlate == null) {
						break;
					}
					// Getting the vehicle based on the input
					numberPlate = numberPlate.toUpperCase();
					Vehicle_info vehicle = lnkVehicle_list.getVehicle(numberPlate);
					// Validate the vehicle
					if (vehicle == null) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no vehicle registered with that number plate.\n" + numberPlate,
								"No such vehicle", JOptionPane.WARNING_MESSAGE);
						break;
					}

					try {
						// Get the permit based on the vehicle
						Permit permit = vehicle.getPermit();
						// Validate the permit
						if (permit.isValid(lnkSystem_status.getDate()))
							// Loop through all of the vehicles on that permit
							for (Vehicle_info v : permit.getVehicles()) {
								// Remove the vehicle from the vehicle list
								lnkVehicle_list.removeVehicle(v.toString());
							}
						// Remove the permit from the permit list
						lnkPermit_list.removePermit(permit, Administration_office.this);
						modellist.removeElement(permit);
					} catch (NullPointerException e1) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that vehicle.\n" + numberPlate, "No such permit",
								JOptionPane.WARNING_MESSAGE);
					}
					break;
				}
			}
		});
		this.getContentPane().add(btnCancelPermit);

		/*
		 * button to modify permit
		 */
		JButton btnModifyPermit = new JButton("Modify permit");
		btnModifyPermit.setBounds(242, 484, 139, 46);
		btnModifyPermit.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Variables to hold a reference to the permit and vehicle
				Permit permit = null;
				Vehicle_info vehicle = null;

				// Asking for the type of search
				String[] options = { "Name", "Number Plate" };
				int optionChosen = JOptionPane.showOptionDialog(Administration_office.this,
						"Do you know the name or the number plate for the permit to change?", "Name or Number Plate",
						JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, "Name");

				// Searching case
				switch (optionChosen) {

				// Search based on name
				case 0:
					// Getting the permit holders name
					String name = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the name of the holder ", "Permit Holder Input", JOptionPane.PLAIN_MESSAGE);
					// Check if the input is null
					if (name == null) {
						return;
					}
					// Check if input is empty
					if (name.equals("")) {
						JOptionPane.showMessageDialog(Administration_office.this, "You may not have an empty name",
								"Empty", JOptionPane.WARNING_MESSAGE);
						break;
					}
					// Get the permit based on the name provided
					permit = lnkPermit_list.get(name);
					// Check if the permit exist in the system
					if (permit == null) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that name:\n" + name, "No permit",
								JOptionPane.WARNING_MESSAGE);
						break;
					}

					// Getting the users operation
					String[] nameOptions;
					if (permit instanceof Day_visitor_permit || permit instanceof Regular_visitor_permit) {
						nameOptions = new String[4];
					} else {
						nameOptions = new String[3];
					}
					nameOptions[0] = "Add vehicle";
					nameOptions[1] = "Delete Vehicle";
					nameOptions[2] = "Change vehicle";
					if (permit instanceof Day_visitor_permit) {
						nameOptions[3] = "Change valid date";
					} else if (permit instanceof Regular_visitor_permit) {
						nameOptions[3] = "Change end date";
					}
					int nameOptionChosen = JOptionPane.showOptionDialog(Administration_office.this,
							"Would you like to change the current vehicle or add an additional vehicle?",
							"Change or Add", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null,
							nameOptions, "Name");
					// Permit modification functions based on the permit proved by the name
					switch (nameOptionChosen) {
					// Adding a vehicle
					case 0:
						// Getting the number plate of the new vehicle
						String newReg = JOptionPane.showInputDialog(Administration_office.this,
								"Please input the new registration plate ", "Add vehicle", JOptionPane.PLAIN_MESSAGE);
						// Validate the input
						if (newReg != null) {
							if (newReg.equals("")) {
								JOptionPane.showMessageDialog(Administration_office.this,
										"You may not have an empty number plate", "Empty", JOptionPane.WARNING_MESSAGE);
								break;
							}
							newReg = newReg.toUpperCase();
							// Check if the vehicle is already registered to a permit
							if (checker(newReg))
								// Adding the new vehicle to the permit
								permit.addVehicle(new Vehicle_info(lnkVehicle_list, newReg, permit));
						}
						break;

					// Deleting a vehicle
					case 1:
						// Getting the number plate of the car to delete
						String toDel = JOptionPane.showInputDialog(Administration_office.this,
								"Please input the registration plate of the vehicle to be deleted", "Remove vehicle",
								JOptionPane.PLAIN_MESSAGE);
						// Validate the input
						if (toDel == null) {
							break;
						}
						// Get the vehicle based on the number plate inputed
						Vehicle_info veh = lnkVehicle_list.getVehicle(toDel);

						// Validate the vehicle
						if (veh != null && permit.getVehicles().contains(veh)) {
							permit.removeVehicle(veh);
							lnkVehicle_list.removeVehicle(toDel);
							veh.setPermit(null);
						} else {
							JOptionPane.showMessageDialog(Administration_office.this,
									"The vehicle requested is not attached to that permit.", "Invalid vehicle",
									JOptionPane.WARNING_MESSAGE);
						}
						break;
					// Change number plate
					case 2:
						// Getting the vehicle to change
						String toChange = JOptionPane.showInputDialog(Administration_office.this,
								"Please input the number plate of the registered vehicle you would like to change",
								"Change vehicle", JOptionPane.PLAIN_MESSAGE);
						// Validate the input
						if (toChange == null) {
							break;
						}
						// Get the vehicle based on the inputed number plate
						toChange = toChange.toUpperCase();
						vehicle = lnkVehicle_list.getVehicle(toChange);
						// Validate the vehicle
						if (vehicle == null || vehicle.getPermit() != permit) {
							JOptionPane.showMessageDialog(Administration_office.this,
									"The vehicle requested is not attached to that permit.", "Invalid vehicle",
									JOptionPane.WARNING_MESSAGE);
							break;
						}

						// Getting the new vehicle
						String changeTo = JOptionPane.showInputDialog(Administration_office.this,
								"Please input the new number plate", "Change vehicle", JOptionPane.PLAIN_MESSAGE);

						// Validate the input
						if (!(changeTo == null) && !changeTo.equals("")) {
							changeTo = changeTo.toUpperCase();
							// Check if the number plate is already in the system
							if (!checker(changeTo)) {
								JOptionPane.showMessageDialog(Administration_office.this,
										"This number plate is already assigned to a different permit.", "Invalid",
										JOptionPane.WARNING_MESSAGE);
								break;
							}
							// Adding the reg number to the vehicle list and
							// removing the old one
							lnkVehicle_list.changeRegNumber(toChange,
									new Vehicle_info(lnkVehicle_list, changeTo, permit));
							// Removing the link to the old reg number in the permit
							permit.removeVehicle(vehicle);

							JOptionPane.showMessageDialog(Administration_office.this,
									"The vehicles number plate has been changed", "Permit Info",
									JOptionPane.WARNING_MESSAGE);
							break;
						} else {
							JOptionPane.showMessageDialog(Administration_office.this,
									"You must provied valid number plate", "Permit Info", JOptionPane.WARNING_MESSAGE);
							break;
						}
						// Changing the end/visit date
					case 3:
						changeDate(permit);
					}// End of nameOptionChosen
					break;
				// Search on number plate
				case 1:
					// Getting the car
					String numberPlate = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the Registration Number of the vehicle", "Registration Number Input",
							JOptionPane.PLAIN_MESSAGE);
					if (numberPlate == null) {
						break;
					}
					numberPlate = numberPlate.toUpperCase();
					// Got the vehicle
					vehicle = lnkVehicle_list.getVehicle(numberPlate);
					// Validate the vehicle
					if (vehicle == null) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no vehicle registered with that number plate.\n" + numberPlate,
								"No such vehicle", JOptionPane.WARNING_MESSAGE);
						break;
					}
					// Get the permit linked to the car
					permit = vehicle.getPermit();
					if (permit == null) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that vehicle.\n" + numberPlate, "No such permit",
								JOptionPane.WARNING_MESSAGE);
						break;
					}

					// Getting the users operation
					String[] regOptions;
					if (permit instanceof Day_visitor_permit || permit instanceof Regular_visitor_permit) {
						regOptions = new String[4];
					} else {
						regOptions = new String[3];
					}
					regOptions[0] = "Add vehicle";
					regOptions[1] = "Delete Vehicle";
					regOptions[2] = "Change vehicle";
					if (permit instanceof Day_visitor_permit) {
						regOptions[3] = "Change valid date";
					} else if (permit instanceof Regular_visitor_permit) {
						regOptions[3] = "Change end date";
					}
					int regOptionChosen = JOptionPane.showOptionDialog(Administration_office.this,
							"Would you like to change the current vehicle or add an additional vehicle?",
							"Change or Add", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, regOptions,
							"Name");
					// Permit modification functions based on the permit proved by the number plate
					switch (regOptionChosen) {
					// Adding vehicle
					case 0:
						// Getting the new number plate of the new vehicle
						String newReg = JOptionPane.showInputDialog(Administration_office.this,
								"Please input the new registration plate ", "Add vehicle", JOptionPane.PLAIN_MESSAGE);
						// Validating the input
						if (!(newReg == null)) {
							newReg = newReg.toUpperCase();
							// Check if the number plate is already in the system
							if (checker(newReg))
								// Adding the vehicle to the permit
								permit.addVehicle(new Vehicle_info(lnkVehicle_list, newReg, permit));
						}
						break;
					// Delete vehicle
					case 1:
						// Getting the number plate of the vehicle to delete
						String toDel = JOptionPane.showInputDialog(Administration_office.this,
								"Please input the registration plate of the vehicle to be deleted", "Remove vehicle",
								JOptionPane.PLAIN_MESSAGE);
						// Validate the input
						if (toDel == null) {
							break;
						}
						// Get the vehicle based on the number plate
						Vehicle_info veh = lnkVehicle_list.getVehicle(toDel);
						// Check the vehicle is in the system
						if (permit.getVehicles().contains(veh)) {
							// Remove the link from the permit
							permit.removeVehicle(veh);
							veh.setPermit(null);
							// Remove the vehicle from the vehicle list
							lnkVehicle_list.removeVehicle(veh.toString());
						}
						break;
					// Change number plate
					case 2:
						// Getting the new eg number
						String toChange = JOptionPane.showInputDialog(Administration_office.this,
								"Please input the new number plate", "Change vehicle", JOptionPane.PLAIN_MESSAGE);

						// Validate the input
						if (!(toChange == null) && !toChange.equals("")) {
							toChange = toChange.toUpperCase();
							// Check the vehicle is in the system
							if (!checker(toChange)) {
								JOptionPane.showMessageDialog(Administration_office.this,
										"This number plate is already assigned to a different permit.", "Invalid",
										JOptionPane.WARNING_MESSAGE);
								break;
							}
							// Removing the old reg and adding the new one to
							// the vehicle list
							lnkVehicle_list.changeRegNumber(numberPlate,
									new Vehicle_info(lnkVehicle_list, toChange, permit));
							// Remove the link to the old reg number
							permit.removeVehicle(vehicle);

							JOptionPane.showMessageDialog(Administration_office.this,
									"The vehicles number plate has been changed", "Permit Info",
									JOptionPane.WARNING_MESSAGE);
							break;
						} else {
							JOptionPane.showMessageDialog(Administration_office.this,
									"You must provied valid number plate", "Permit Info", JOptionPane.WARNING_MESSAGE);
						}
						// Changing the end/visit date
					case 3:
						changeDate(permit);

					}// End regOptionChosen

				}// End of optionChosen
			}
		});
		this.getContentPane().add(btnModifyPermit);

		/*
		 * button to enquire about Status
		 */
		JButton btnSatus = new JButton("Status enquiry");
		btnSatus.setBounds(242, 541, 139, 46);
		btnSatus.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Asking for the type of search
				String[] options = { "Name", "Number Plate" };
				int optionChosen = JOptionPane.showOptionDialog(Administration_office.this,
						"Do you know the name or the number plate to query?", "Name or Number Plate",
						JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, "Name");
				// Searching case
				switch (optionChosen) {
				// Search based on name
				case 0:
					String name = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the name of the holder ", "Permit Holder Input", JOptionPane.PLAIN_MESSAGE);
					// Validate the input
					if (name == null) {
						break;
					}
					try {
						// Display the permit info
						JOptionPane.showMessageDialog(Administration_office.this, lnkPermit_list.get(name).toString(),
								"Permit Info", JOptionPane.WARNING_MESSAGE);

					} catch (NullPointerException e1) {
						// Display that no permit was found
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that name.\n" + name, "No such permit",
								JOptionPane.WARNING_MESSAGE);
					}
					break;
				case 1:
					// Reg No input and search
					String numberPlate = JOptionPane.showInputDialog(Administration_office.this,
							"Please input the Registration Number", "Registration Number Input",
							JOptionPane.PLAIN_MESSAGE);
					// Validate the input
					if (numberPlate == null) {
						break;
					}
					// Get the vehicle based on the input
					numberPlate = numberPlate.toUpperCase();
					Vehicle_info vehicle = lnkVehicle_list.getVehicle(numberPlate);

					// Validate the vehicle
					if (vehicle == null) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no vehicle registered with that number plate.\n" + numberPlate,
								"No such vehicle", JOptionPane.WARNING_MESSAGE);
						break;
					}

					try {
						// Get the permit based on the vehicle
						Permit permit = vehicle.getPermit();
						// Validate the permit
						if (permit.isValid(lnkSystem_status.getDate()))
							// Display the permit info
							JOptionPane.showMessageDialog(Administration_office.this, permit.toString(), "Permit Info",
									JOptionPane.WARNING_MESSAGE);
					} catch (NullPointerException e1) {
						// Display that no permit was found
						JOptionPane.showMessageDialog(Administration_office.this,
								"There is no permit registered to that vehicle.\n" + numberPlate, "No such permit",
								JOptionPane.WARNING_MESSAGE);
					}
					break;
				}
			}
		});
		this.getContentPane().add(btnSatus);

		JLabel lblAddNewPermit = new JLabel("Create new permit");
		lblAddNewPermit.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblAddNewPermit.setBounds(20, 35, 117, 28);
		this.getContentPane().add(lblAddNewPermit);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane.setBounds(20, 310, 212, 277);
		this.getContentPane().add(scrollPane);

		list = new JList<Permit>(modellist);
		scrollPane.setViewportView(list);
		list.setLayoutOrientation(JList.HORIZONTAL_WRAP);

		JLabel lblDate = new JLabel("DATE");
		lblDate.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblDate.setBounds(20, 11, 70, 20);
		this.getContentPane().add(lblDate);

		JSeparator separator = new JSeparator();
		separator.setBounds(20, 268, 275, 2);
		this.getContentPane().add(separator);

		JLabel lblName = new JLabel("Full name:");
		lblName.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblName.setBounds(20, 137, 85, 14);
		this.getContentPane().add(lblName);

		textDate.setText(Integer.toString(lnkSystem_status.getDate().getDay()));

		JLabel lblHostName = new JLabel("Host name:");
		lblHostName.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblHostName.setBounds(20, 162, 78, 14);
		this.getContentPane().add(lblHostName);

		JSpinner spnStartDate = new JSpinner();
		spnStartDate.setModel(new SpinnerNumberModel(1, 1, Date.yearLength, 1));
		spnStartDate.setBounds(113, 111, 119, 20);
		this.getContentPane().add(spnStartDate);

		JSpinner spnEndDate = new JSpinner();
		spnEndDate.setModel(new SpinnerNumberModel(1, 1, Date.yearLength, 1));
		spnEndDate.setBounds(288, 111, 119, 20);
		spnEndDate.setEnabled(false);
		this.getContentPane().add(spnEndDate);

		JLabel lblStart = new JLabel("Start On :");
		lblStart.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblStart.setBounds(20, 112, 117, 14);
		this.getContentPane().add(lblStart);

		JLabel lblEnd = new JLabel("End On: ");
		lblEnd.setBounds(242, 114, 46, 14);
		this.getContentPane().add(lblEnd);

		JSpinner spinner = new JSpinner();
		spinner.setFont(new Font("Tahoma", Font.PLAIN, 13));
		spinner.setModel(new SpinnerListModel(
				new String[] { "Day Visitor", "Regular Visitor", "Permanent Visitor", "Unversity Member" }));
		spinner.setBounds(20, 72, 212, 28);
		spinner.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent e) {
				String s = (String) spinner.getValue();
				switch (s) {
				case "Permanent Visitor":
				case "University Member":
					spnStartDate.setEnabled(false);
					spnEndDate.setEnabled(false);
					textHostName.setEnabled(false);
					break;
				case "Day Visitor":
					spnStartDate.setEnabled(true);
					spnEndDate.setEnabled(false);
					textHostName.setEnabled(true);
					break;
				case "Regular Visitor":
					spnStartDate.setEnabled(true);
					spnEndDate.setEnabled(true);
					textHostName.setEnabled(true);
					break;
				}
			}
		});
		this.getContentPane().add(spinner);

		/*
		 * button to issue a new permit
		 */
		JButton btnNewPermit = new JButton("Issue new permit");
		btnNewPermit.setFont(new Font("Tahoma", Font.PLAIN, 14));
		btnNewPermit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// Getting the type of permit
				// used for the switch
				String permitType = spinner.getValue().toString();
				// holder of the permit
				String permitName = textName.getText();

				String hostName = textHostName.getText();
				// vehicle registration number
				String regNum = textRegNum.getText();
				regNum = regNum.toUpperCase();

				switch (permitType) {
				case "Day Visitor": {
					if (textName.getText().isEmpty() || textRegNum.getText().isEmpty() || hostName.isEmpty()) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"You must provide a full name a host name, and a number plate", "Missing Date",
								JOptionPane.WARNING_MESSAGE);
						break;
					}

					if (checker(regNum)) {

						Day_visitor_permit dv = new Day_visitor_permit(permitName, hostName,
								new Date((int) spnStartDate.getValue()));

						if (lnkPermit_list.addPermit(dv, Administration_office.this)) {

							new Vehicle_info(lnkVehicle_list, regNum, dv);
							modellist.addElement(dv);

						}
					} else {

						JOptionPane.showMessageDialog(Administration_office.this,
								"The given vehicle is already attached to a permit.", "Duplicate entry",
								JOptionPane.WARNING_MESSAGE);

					}
				}
					break;
				// Robert Dunsmore
				// Adding a regular visit to the system
				case "Regular Visitor": {

					if (textName.getText().isEmpty() || textRegNum.getText().isEmpty() || hostName.isEmpty()) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"You must provide a full name, a host name, and a number plate", "Missing Date",
								JOptionPane.WARNING_MESSAGE);
						break;
					}

					// Get the two datas
					Date startDate = new Date((int) spnStartDate.getValue());
					Date endDate = new Date((int) spnEndDate.getValue());

					if ((endDate.isBefore(startDate) || startDate.isBefore(lnkSystem_status.getDate()))
							&& lnkSystem_status.getDate().isBefore(new Date(endDate.getDay() + 1))) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"You may not add a permit which will expire more than a year from now.",
								"Illegal entry", JOptionPane.WARNING_MESSAGE);
						return;
					}

					// Check if the regNum is already registered
					if (checker(regNum)) {
						// Create new permit
						Regular_visitor_permit regularVisitor = new Regular_visitor_permit(permitName, hostName,
								startDate, endDate);

						if (lnkPermit_list.addPermit(regularVisitor, Administration_office.this)) {
							new Vehicle_info(lnkVehicle_list, regNum, regularVisitor);
							modellist.addElement(regularVisitor);
						}

					} else {
						JOptionPane.showMessageDialog(Administration_office.this, "Already registered");
					}
					break;
				}
				case "Permanent Visitor": {

					if (textName.getText().isEmpty() || textRegNum.getText().isEmpty()) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"You must provide a full name and a number plate", "Missing Date",
								JOptionPane.WARNING_MESSAGE);
						break;
					}

					if (checker(regNum)) {
						Permanent_visitor_permit permanentVisitorPermit = new Permanent_visitor_permit(
								textName.getText());

						if (lnkPermit_list.addPermit(permanentVisitorPermit, Administration_office.this)) {
							new Vehicle_info(lnkVehicle_list, regNum, permanentVisitorPermit);
							modellist.addElement(permanentVisitorPermit);

						}
					} else {
						JOptionPane.showMessageDialog(Administration_office.this, "Already registered");
					}

					break;
				}

				case "Unversity Member": {

					if (textName.getText().isEmpty() || textRegNum.getText().isEmpty()) {
						JOptionPane.showMessageDialog(Administration_office.this,
								"You must provide a full name and a number plate", "Missing Date",
								JOptionPane.WARNING_MESSAGE);
						break;
					}

					if (checker(regNum)) {
						University_member_permit ump = new University_member_permit(textName.getText(),
								new Date(lnkSystem_status.getDate().getDay()));

						if (lnkPermit_list.addPermit(ump, Administration_office.this)) {
							new Vehicle_info(lnkVehicle_list, regNum, ump);
							modellist.addElement(ump);

						}
					} else {
						JOptionPane.showMessageDialog(Administration_office.this, "Already registered");
					}

					break;
				}

				}// End of switch

			}
		});
		btnNewPermit.setBounds(20, 223, 212, 37);
		this.getContentPane().add(btnNewPermit);

		this.setVisible(true);

	}

	/**
	 * Method to issue a new permit based on the vehicle regNum, the type of permit
	 * to be issued.
	 * 
	 * @return boolean if the new permit has been issued.
	 */
	// private boolean issueNewPermit(String name, String regNum)
	// {
	// return true;
	// }

	/**
	 * Checking if the number plate is already in the system. If the number plate is
	 * not in the system true is returned
	 * 
	 * @param num
	 *            : The number plate to be checked
	 * @return
	 */
	public boolean checker(String num) {
		Vehicle_info veh = lnkVehicle_list.getVehicle(num);
		if (veh == null || veh.getPermit() == null) {
			return true;
		}

		return false;
	}

	@Override
	public void update(Observable o, Object arg) {
		textDate.setText(Integer.toString(lnkSystem_status.getDate().getDay()));

		modellist.clear();
		for (Permit p : lnkPermit_list.getAll()) {
			modellist.addElement(p);
		}

		// Removing all vehicles that are attached to an expired permit
		for (Vehicle_info v : lnkVehicle_list.getAll()) {
			if (v.getPermit() == null) {
				lnkVehicle_list.removeVehicle(v.toString());
			}
		}
	}

	/**
	 * Changes the valid date on Day visitor permits and the end date for regular
	 * visitors
	 * 
	 * @param p
	 *            the permit to be updated
	 */
	private void changeDate(Permit p) {
		// Check if the permit is a Day visitor permit
		if (p instanceof Day_visitor_permit) {
			// Get the date to change to
			String newDateStr = JOptionPane.showInputDialog(Administration_office.this,
					"Please enter the new visit date:", "New Date", JOptionPane.PLAIN_MESSAGE);
			// If they cancelled the change, do nothing
			if (newDateStr == null) {
				return;
			}
			try {
				// Convert it to an integer
				int newDateInt = Integer.parseInt(newDateStr);
				// Make sure the date entered is valid)
				if (!(newDateInt > 0 && newDateInt <= Date.yearLength)) {
					throw new NumberFormatException();
				}
				// Check that the permit has not been used
				// already (valid today and used to enter)
				if (!p.hasEntered()) {
					// Change the date
					p.setDate(new Date(newDateInt));
				} else {
					JOptionPane.showMessageDialog(this,
							"The permit has already been used, so you may not change the day.", "Already used",
							JOptionPane.WARNING_MESSAGE);
				}
			} catch (NullPointerException e) {// if they cancelled the change, do nothing
			} catch (NumberFormatException e) {// respond to invalid date input
				JOptionPane.showMessageDialog(this, "Invalid date.", "Invalid", JOptionPane.WARNING_MESSAGE);
			}
		} else if (p instanceof Regular_visitor_permit) {// Check if the permit is a Day visitor permit
			// Get the date to change to
			String newDateStr = JOptionPane.showInputDialog(Administration_office.this,
					"Please enter the new end date:", "New Date", JOptionPane.PLAIN_MESSAGE);
			// If they cancelled the change, do nothing
			if (newDateStr == null) {
				return;
			}
			try {
				// Convert it to an integer
				int newDateInt = Integer.parseInt(newDateStr);
				// Make sure the date entered is valid
				if (!(newDateInt > 0 && newDateInt <= Date.yearLength)) {
					throw new NumberFormatException();
				}
				// Create a Date object
				Date newDate = new Date(newDateInt);
				// Check that the permit will not expire before starting
				if (p.isValid(lnkSystem_status.getDate())
						|| (lnkSystem_status.getDate().isBefore(((Regular_visitor_permit) p).getStartDay())
								&& (newDate.isBefore(lnkSystem_status.getDate())
										|| ((Regular_visitor_permit) p).getStartDay().isBefore(newDate)))) {
					// Change the date
					p.setDate(newDate);
				} else {// respond to date input which would make expiry before the start date
					JOptionPane.showMessageDialog(this,
							"You may not change the end date to a value between now and the start date.",
							"Illegal value", JOptionPane.WARNING_MESSAGE);
				}
			} catch (NullPointerException e) {
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "Invalid date.", "Invalid", JOptionPane.WARNING_MESSAGE);
			}
		}
	}
}
